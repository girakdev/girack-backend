// Code generated by MockGen. DO NOT EDIT.
// Source: channel.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/girakdev/girack-backend/domain/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockChannelRepository is a mock of ChannelRepository interface.
type MockChannelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChannelRepositoryMockRecorder
}

// MockChannelRepositoryMockRecorder is the mock recorder for MockChannelRepository.
type MockChannelRepositoryMockRecorder struct {
	mock *MockChannelRepository
}

// NewMockChannelRepository creates a new mock instance.
func NewMockChannelRepository(ctrl *gomock.Controller) *MockChannelRepository {
	mock := &MockChannelRepository{ctrl: ctrl}
	mock.recorder = &MockChannelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelRepository) EXPECT() *MockChannelRepositoryMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelRepository) CreateChannel(ctx context.Context, input *repository.CreateChannelInput) (*repository.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, input)
	ret0, _ := ret[0].(*repository.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelRepositoryMockRecorder) CreateChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelRepository)(nil).CreateChannel), ctx, input)
}

// DeleteChannel mocks base method.
func (m *MockChannelRepository) DeleteChannel(ctx context.Context, input *repository.DeleteChannelInput) (*repository.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, input)
	ret0, _ := ret[0].(*repository.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChannelRepositoryMockRecorder) DeleteChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelRepository)(nil).DeleteChannel), ctx, input)
}

// GetChannel mocks base method.
func (m *MockChannelRepository) GetChannel(ctx context.Context, input *repository.GetChannelInput) (*repository.GetChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", ctx, input)
	ret0, _ := ret[0].(*repository.GetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockChannelRepositoryMockRecorder) GetChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelRepository)(nil).GetChannel), ctx, input)
}

// GetChannelList mocks base method.
func (m *MockChannelRepository) GetChannelList(ctx context.Context, input *repository.GetChannelListInput) (*repository.GetChannelListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelList", ctx, input)
	ret0, _ := ret[0].(*repository.GetChannelListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelList indicates an expected call of GetChannelList.
func (mr *MockChannelRepositoryMockRecorder) GetChannelList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelList", reflect.TypeOf((*MockChannelRepository)(nil).GetChannelList), ctx, input)
}

// MockChannelGetter is a mock of ChannelGetter interface.
type MockChannelGetter struct {
	ctrl     *gomock.Controller
	recorder *MockChannelGetterMockRecorder
}

// MockChannelGetterMockRecorder is the mock recorder for MockChannelGetter.
type MockChannelGetterMockRecorder struct {
	mock *MockChannelGetter
}

// NewMockChannelGetter creates a new mock instance.
func NewMockChannelGetter(ctrl *gomock.Controller) *MockChannelGetter {
	mock := &MockChannelGetter{ctrl: ctrl}
	mock.recorder = &MockChannelGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelGetter) EXPECT() *MockChannelGetterMockRecorder {
	return m.recorder
}

// GetChannel mocks base method.
func (m *MockChannelGetter) GetChannel(ctx context.Context, input *repository.GetChannelInput) (*repository.GetChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", ctx, input)
	ret0, _ := ret[0].(*repository.GetChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockChannelGetterMockRecorder) GetChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockChannelGetter)(nil).GetChannel), ctx, input)
}

// MockChannelListGetter is a mock of ChannelListGetter interface.
type MockChannelListGetter struct {
	ctrl     *gomock.Controller
	recorder *MockChannelListGetterMockRecorder
}

// MockChannelListGetterMockRecorder is the mock recorder for MockChannelListGetter.
type MockChannelListGetterMockRecorder struct {
	mock *MockChannelListGetter
}

// NewMockChannelListGetter creates a new mock instance.
func NewMockChannelListGetter(ctrl *gomock.Controller) *MockChannelListGetter {
	mock := &MockChannelListGetter{ctrl: ctrl}
	mock.recorder = &MockChannelListGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelListGetter) EXPECT() *MockChannelListGetterMockRecorder {
	return m.recorder
}

// GetChannelList mocks base method.
func (m *MockChannelListGetter) GetChannelList(ctx context.Context, input *repository.GetChannelListInput) (*repository.GetChannelListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelList", ctx, input)
	ret0, _ := ret[0].(*repository.GetChannelListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelList indicates an expected call of GetChannelList.
func (mr *MockChannelListGetterMockRecorder) GetChannelList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelList", reflect.TypeOf((*MockChannelListGetter)(nil).GetChannelList), ctx, input)
}

// MockChannelCreator is a mock of ChannelCreator interface.
type MockChannelCreator struct {
	ctrl     *gomock.Controller
	recorder *MockChannelCreatorMockRecorder
}

// MockChannelCreatorMockRecorder is the mock recorder for MockChannelCreator.
type MockChannelCreatorMockRecorder struct {
	mock *MockChannelCreator
}

// NewMockChannelCreator creates a new mock instance.
func NewMockChannelCreator(ctrl *gomock.Controller) *MockChannelCreator {
	mock := &MockChannelCreator{ctrl: ctrl}
	mock.recorder = &MockChannelCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelCreator) EXPECT() *MockChannelCreatorMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelCreator) CreateChannel(ctx context.Context, input *repository.CreateChannelInput) (*repository.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, input)
	ret0, _ := ret[0].(*repository.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelCreatorMockRecorder) CreateChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelCreator)(nil).CreateChannel), ctx, input)
}

// MockChannelDeleter is a mock of ChannelDeleter interface.
type MockChannelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockChannelDeleterMockRecorder
}

// MockChannelDeleterMockRecorder is the mock recorder for MockChannelDeleter.
type MockChannelDeleterMockRecorder struct {
	mock *MockChannelDeleter
}

// NewMockChannelDeleter creates a new mock instance.
func NewMockChannelDeleter(ctrl *gomock.Controller) *MockChannelDeleter {
	mock := &MockChannelDeleter{ctrl: ctrl}
	mock.recorder = &MockChannelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelDeleter) EXPECT() *MockChannelDeleterMockRecorder {
	return m.recorder
}

// DeleteChannel mocks base method.
func (m *MockChannelDeleter) DeleteChannel(ctx context.Context, input *repository.DeleteChannelInput) (*repository.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, input)
	ret0, _ := ret[0].(*repository.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChannelDeleterMockRecorder) DeleteChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelDeleter)(nil).DeleteChannel), ctx, input)
}
