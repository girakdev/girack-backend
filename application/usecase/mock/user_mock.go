// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	usecase "github.com/girakdev/girack-backend/application/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserUsecase) DeleteUser(ctx context.Context, input *usecase.DeleteUserInput) (*usecase.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, input)
	ret0, _ := ret[0].(*usecase.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUsecaseMockRecorder) DeleteUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUsecase)(nil).DeleteUser), ctx, input)
}

// GetUser mocks base method.
func (m *MockUserUsecase) GetUser(ctx context.Context, input *usecase.GetUserInput) (*usecase.GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, input)
	ret0, _ := ret[0].(*usecase.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserUsecaseMockRecorder) GetUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserUsecase)(nil).GetUser), ctx, input)
}

// ListUser mocks base method.
func (m *MockUserUsecase) ListUser(ctx context.Context, input *usecase.ListUserInput) (*usecase.ListUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx, input)
	ret0, _ := ret[0].(*usecase.ListUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockUserUsecaseMockRecorder) ListUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockUserUsecase)(nil).ListUser), ctx, input)
}

// MockUserGetter is a mock of UserGetter interface.
type MockUserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserGetterMockRecorder
}

// MockUserGetterMockRecorder is the mock recorder for MockUserGetter.
type MockUserGetterMockRecorder struct {
	mock *MockUserGetter
}

// NewMockUserGetter creates a new mock instance.
func NewMockUserGetter(ctrl *gomock.Controller) *MockUserGetter {
	mock := &MockUserGetter{ctrl: ctrl}
	mock.recorder = &MockUserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGetter) EXPECT() *MockUserGetterMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserGetter) GetUser(ctx context.Context, input *usecase.GetUserInput) (*usecase.GetUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, input)
	ret0, _ := ret[0].(*usecase.GetUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserGetterMockRecorder) GetUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserGetter)(nil).GetUser), ctx, input)
}

// MockUserLister is a mock of UserLister interface.
type MockUserLister struct {
	ctrl     *gomock.Controller
	recorder *MockUserListerMockRecorder
}

// MockUserListerMockRecorder is the mock recorder for MockUserLister.
type MockUserListerMockRecorder struct {
	mock *MockUserLister
}

// NewMockUserLister creates a new mock instance.
func NewMockUserLister(ctrl *gomock.Controller) *MockUserLister {
	mock := &MockUserLister{ctrl: ctrl}
	mock.recorder = &MockUserListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLister) EXPECT() *MockUserListerMockRecorder {
	return m.recorder
}

// ListUser mocks base method.
func (m *MockUserLister) ListUser(ctx context.Context, input *usecase.ListUserInput) (*usecase.ListUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx, input)
	ret0, _ := ret[0].(*usecase.ListUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockUserListerMockRecorder) ListUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockUserLister)(nil).ListUser), ctx, input)
}

// MockUserCreator is a mock of UserCreator interface.
type MockUserCreator struct {
	ctrl     *gomock.Controller
	recorder *MockUserCreatorMockRecorder
}

// MockUserCreatorMockRecorder is the mock recorder for MockUserCreator.
type MockUserCreatorMockRecorder struct {
	mock *MockUserCreator
}

// NewMockUserCreator creates a new mock instance.
func NewMockUserCreator(ctrl *gomock.Controller) *MockUserCreator {
	mock := &MockUserCreator{ctrl: ctrl}
	mock.recorder = &MockUserCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCreator) EXPECT() *MockUserCreatorMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserCreator) CreateUser(ctx context.Context, input *usecase.CreateUserInput) (*usecase.CreateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(*usecase.CreateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserCreatorMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserCreator)(nil).CreateUser), ctx, input)
}

// MockUserDeleter is a mock of UserDeleter interface.
type MockUserDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockUserDeleterMockRecorder
}

// MockUserDeleterMockRecorder is the mock recorder for MockUserDeleter.
type MockUserDeleterMockRecorder struct {
	mock *MockUserDeleter
}

// NewMockUserDeleter creates a new mock instance.
func NewMockUserDeleter(ctrl *gomock.Controller) *MockUserDeleter {
	mock := &MockUserDeleter{ctrl: ctrl}
	mock.recorder = &MockUserDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDeleter) EXPECT() *MockUserDeleterMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockUserDeleter) DeleteUser(ctx context.Context, input *usecase.DeleteUserInput) (*usecase.DeleteUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, input)
	ret0, _ := ret[0].(*usecase.DeleteUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserDeleterMockRecorder) DeleteUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserDeleter)(nil).DeleteUser), ctx, input)
}

// MockUserUpdater is a mock of UserUpdater interface.
type MockUserUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockUserUpdaterMockRecorder
}

// MockUserUpdaterMockRecorder is the mock recorder for MockUserUpdater.
type MockUserUpdaterMockRecorder struct {
	mock *MockUserUpdater
}

// NewMockUserUpdater creates a new mock instance.
func NewMockUserUpdater(ctrl *gomock.Controller) *MockUserUpdater {
	mock := &MockUserUpdater{ctrl: ctrl}
	mock.recorder = &MockUserUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUpdater) EXPECT() *MockUserUpdaterMockRecorder {
	return m.recorder
}

// UpdateUser mocks base method.
func (m *MockUserUpdater) UpdateUser(ctx context.Context, input *usecase.UpdateUserInput) (*usecase.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, input)
	ret0, _ := ret[0].(*usecase.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUpdaterMockRecorder) UpdateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUpdater)(nil).UpdateUser), ctx, input)
}
