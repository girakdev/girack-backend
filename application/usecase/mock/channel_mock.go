// Code generated by MockGen. DO NOT EDIT.
// Source: channel.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	usecase "github.com/girakdev/girack-backend/application/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockChannelUsecase is a mock of ChannelUsecase interface.
type MockChannelUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockChannelUsecaseMockRecorder
}

// MockChannelUsecaseMockRecorder is the mock recorder for MockChannelUsecase.
type MockChannelUsecaseMockRecorder struct {
	mock *MockChannelUsecase
}

// NewMockChannelUsecase creates a new mock instance.
func NewMockChannelUsecase(ctrl *gomock.Controller) *MockChannelUsecase {
	mock := &MockChannelUsecase{ctrl: ctrl}
	mock.recorder = &MockChannelUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelUsecase) EXPECT() *MockChannelUsecaseMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelUsecase) CreateChannel(ctx context.Context, input *usecase.CreateChannelInput) (*usecase.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, input)
	ret0, _ := ret[0].(*usecase.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelUsecaseMockRecorder) CreateChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelUsecase)(nil).CreateChannel), ctx, input)
}

// DeleteChannel mocks base method.
func (m *MockChannelUsecase) DeleteChannel(ctx context.Context, input *usecase.DeleteChannelInput) (*usecase.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, input)
	ret0, _ := ret[0].(*usecase.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChannelUsecaseMockRecorder) DeleteChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelUsecase)(nil).DeleteChannel), ctx, input)
}

// GetChannelList mocks base method.
func (m *MockChannelUsecase) GetChannelList(ctx context.Context, input *usecase.GetChannelListInput) (*usecase.GetChannelListOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelList", ctx, input)
	ret0, _ := ret[0].(*usecase.GetChannelListOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelList indicates an expected call of GetChannelList.
func (mr *MockChannelUsecaseMockRecorder) GetChannelList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelList", reflect.TypeOf((*MockChannelUsecase)(nil).GetChannelList), ctx, input)
}

// MockChannelLister is a mock of ChannelLister interface.
type MockChannelLister struct {
	ctrl     *gomock.Controller
	recorder *MockChannelListerMockRecorder
}

// MockChannelListerMockRecorder is the mock recorder for MockChannelLister.
type MockChannelListerMockRecorder struct {
	mock *MockChannelLister
}

// NewMockChannelLister creates a new mock instance.
func NewMockChannelLister(ctrl *gomock.Controller) *MockChannelLister {
	mock := &MockChannelLister{ctrl: ctrl}
	mock.recorder = &MockChannelListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelLister) EXPECT() *MockChannelListerMockRecorder {
	return m.recorder
}

// GetChannelList mocks base method.
func (m *MockChannelLister) GetChannelList(ctx context.Context, input *usecase.GetChannelListInput) (*usecase.GetChannelListOut, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelList", ctx, input)
	ret0, _ := ret[0].(*usecase.GetChannelListOut)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelList indicates an expected call of GetChannelList.
func (mr *MockChannelListerMockRecorder) GetChannelList(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelList", reflect.TypeOf((*MockChannelLister)(nil).GetChannelList), ctx, input)
}

// MockChannelCreator is a mock of ChannelCreator interface.
type MockChannelCreator struct {
	ctrl     *gomock.Controller
	recorder *MockChannelCreatorMockRecorder
}

// MockChannelCreatorMockRecorder is the mock recorder for MockChannelCreator.
type MockChannelCreatorMockRecorder struct {
	mock *MockChannelCreator
}

// NewMockChannelCreator creates a new mock instance.
func NewMockChannelCreator(ctrl *gomock.Controller) *MockChannelCreator {
	mock := &MockChannelCreator{ctrl: ctrl}
	mock.recorder = &MockChannelCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelCreator) EXPECT() *MockChannelCreatorMockRecorder {
	return m.recorder
}

// CreateChannel mocks base method.
func (m *MockChannelCreator) CreateChannel(ctx context.Context, input *usecase.CreateChannelInput) (*usecase.CreateChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", ctx, input)
	ret0, _ := ret[0].(*usecase.CreateChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockChannelCreatorMockRecorder) CreateChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockChannelCreator)(nil).CreateChannel), ctx, input)
}

// MockChannelDeleter is a mock of ChannelDeleter interface.
type MockChannelDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockChannelDeleterMockRecorder
}

// MockChannelDeleterMockRecorder is the mock recorder for MockChannelDeleter.
type MockChannelDeleterMockRecorder struct {
	mock *MockChannelDeleter
}

// NewMockChannelDeleter creates a new mock instance.
func NewMockChannelDeleter(ctrl *gomock.Controller) *MockChannelDeleter {
	mock := &MockChannelDeleter{ctrl: ctrl}
	mock.recorder = &MockChannelDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelDeleter) EXPECT() *MockChannelDeleterMockRecorder {
	return m.recorder
}

// DeleteChannel mocks base method.
func (m *MockChannelDeleter) DeleteChannel(ctx context.Context, input *usecase.DeleteChannelInput) (*usecase.DeleteChannelOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", ctx, input)
	ret0, _ := ret[0].(*usecase.DeleteChannelOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockChannelDeleterMockRecorder) DeleteChannel(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockChannelDeleter)(nil).DeleteChannel), ctx, input)
}
